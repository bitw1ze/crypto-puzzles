#!/usr/bin/env python3.2

_author_ = "Gabe Pike"
_email_ = "gpike@isecpartners.com"

from sys import exit
from time import time
from random import randint
from Crypto import Random
from mycrypto import fixed_xor
from myrand import MT19937

''' This may take a few minutes to run on your machine '''

class MT19937Cipher:


    def __init__(self, key):
        self.rng = MT19937(seed=key)

    def crypt(self, msg):
        return fixed_xor(self.rng.read(len(msg)), msg)
    
    def encrypt(self, pt):
        return self.crypt(pt)

    def decrypt(self, ct):
        return self.crypt(ct)

def military_grade_encryption(pt):
    cipher = MT19937Cipher(key=0xbad1)
    rng = Random.new()
    return cipher.encrypt(rng.read(randint(0,256)) + pt)

def chinese_apt(plaintext):
    ct = military_grade_encryption(plaintext)
    for k in range(0x10000):
        pt = MT19937Cipher(key=k).decrypt(ct)
        if plaintext in pt:
            return k
    else:
        raise Exception("Your code is bad and you should feel bad")

def get_pwreset_token():
    # generate a 16-byte password reset token seeded with current time
    return MT19937(seed=int(time())).read(16)

def crack_pwreset_token(token):
    ''' 

    find seed for password reset token. throw exception if token wasn't
    generated by a timestamp-seeded MT19937 PRNG 

    '''

    timestamp = int(time())

    # check if timestamp is +12 or -12 hours from current time
    timerange = 12 * 60 * 60
    for ts in range(timestamp-timerange, timestamp+timerange):
        if MT19937(seed=ts).read(len(token)) == token:
            return ts
    else:
        raise Exception("This pw token is probably not generated by a\
                        timestamp-seeded MT19937 PRNG")

def _test():
    ''' test encryption and decryption of data '''
    plaintext = b"Cooking MC's like a pound of bacon"
    key = 0xFFFF
    encrypter = MT19937Cipher(seed=key)
    decrypter = MT19937Cipher(seed=key)
    encrypted = encrypter.crypt(msg=plaintext)
    decrypted = decrypter.crypt(msg=encrypted)
    print(encrypted)
    print(decrypted)

def main():
    print("Recovered seed for Enc(random_data || known_plaintext, key): 0x%x" %
            chinese_apt(plaintext=(b'A'*14)))
    print("Recovered seed for password reset token: %d" %
            crack_pwreset_token(get_pwreset_token()))

if __name__ == '__main__':
    exit(main())
