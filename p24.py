from sys import exit
from time import time
from random import randint
from Crypto import Random
from mycrypto import fixed_xor
from myrand import MT19937

class MT19937Cipher:


    def __init__(self, seed):
        self.rng = MT19937(seed=seed)

    def crypt(self, msg):
        return fixed_xor(self.rng.read(len(msg)), msg)
    
    def encrypt(self, pt):
        return self.crypt(pt)

    def decrypt(self, ct):
        return self.crypt(ct)

def military_grade_encryption(pt):
    key = 0xbad1
    cipher = MT19937Cipher(seed=key)
    rng = Random.new()
    return cipher.encrypt(rng.read(randint(0,256)) + pt)

def chinese_apt():
    plaintext = b'A'*14
    ct = military_grade_encryption(plaintext)
    for k in range(0x10000):
        pt = MT19937Cipher(seed=k).decrypt(ct)
        if plaintext in pt:
            return k
    else:
        raise Exception("Your code is bad and you should feel bad")

def get_pwreset_token():
    # generate a 32-byte password reset token seeded with current time
    return MT19937(seed=int(time())).read(32)

def crack_pwreset_token():
    token = get_pwreset_token()
    timestamp = int(time())

    # check if timestamp is +12 or -12 hours from current time
    timerange = 12 * 60 * 60
    for ts in range(timestamp-timerange, timestamp+timerange):
        if MT19937(seed=ts).read(len(token)) == token:
            return ts
    else:
        raise Exception("This pw token is probably not generated by a timestamp-seeded MT19937 RNG")

def _test():
    plaintext = b"Cooking MC's like a pound of bacon"
    key = 0xFFFF
    encrypter = MT19937Cipher(seed=key)
    decrypter = MT19937Cipher(seed=key)
    encrypted = encrypter.crypt(msg=plaintext)
    decrypted = decrypter.crypt(msg=encrypted)
    print(encrypted)
    print(decrypted)

def main():
    print("Recovered seed for ciphtext encrypted with known plaintext: 0x%x" % chinese_apt())
    print("Recovered seed for password reset token: %d" % crack_pwreset_token())

if __name__ == '__main__':
    exit(main())
